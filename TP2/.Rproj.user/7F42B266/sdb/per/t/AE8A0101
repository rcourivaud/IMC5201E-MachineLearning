{
    "contents" : "#Import eds fichiers beta et gamme et conversion en data frame\n\n\ncreate_list_score <- function(path_file_beta, path_file_gamma, use_cor){\n  \n  final.beta = read.table(path_file_beta)\n  final.gamma = read.table(path_file_gamma)\n  df.beta = as.data.frame(final.beta)\n  df.beta[is.na(df.beta)] <- 0\n  \n  df.gamma = as.data.frame(final.gamma)\n  #Conversion de beta en exponentiel de chaque élement\n  df.beta.exp = exp(df.beta )\n  \n  \n  #Transposition de beta\n  df.beta.exp.t = as.data.frame(t(df.beta.exp))\n  if(ncol(df.beta.exp.t)==10){\n    colnames(df.beta.exp.t ) <- c(\"K1\",\"K2\",\"K3\",\"K4\",\"K5\",\"K6\",\"K7\",\"K8\",\"K9\",\"K10\")\n  }\n  else if(ncol(df.beta.exp.t)==20){\n    colnames(df.beta.exp.t ) <- c(\"K1\",\"K2\",\"K3\",\"K4\",\"K5\",\"K6\",\"K7\",\"K8\",\"K9\",\"K10\",\"K11\",\"K12\",\"K13\",\"K14\",\"K15\",\"K16\",\"K17\",\"K18\",\"K19\",\"K20\")\n  }\n  \n  \n  \n  #Application de la régression linéaire de chaque colonne( vu qu'on a transposé),\n  #en fonction des colonnes restantes\n  coefficients.k1 = lm(K1~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k2 = lm(K2~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k3 = lm(K3~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k4 = lm(K4~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k5 = lm(K5~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k6 = lm(K6~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k7 = lm(K7~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k8 = lm(K8~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k9 = lm(K9~., data = df.beta.exp.t)$coefficients[2:10]\n  coefficients.k10 = lm(K10~., data = df.beta.exp.t)$coefficients[2:10]\n  \n  if(ncol(df.beta.exp.t)==20){\n    coefficients.k11 = lm(K11~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k12 = lm(K12~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k13 = lm(K13~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k14 = lm(K14~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k15 = lm(K15~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k16 = lm(K16~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k17 = lm(K17~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k18 = lm(K18~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k19 = lm(K19~., data = df.beta.exp.t)$coefficients[2:10]\n    coefficients.k20 = lm(K20~., data = df.beta.exp.t)$coefficients[2:10]\n  }\n  \n  # Creation des top 3 pour le fichier beta pour chaque régression\n  top3.K1 = sort(abs(lm(K1~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K2 = sort(abs(lm(K2~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K3 = sort(abs(lm(K3~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K4 = sort(abs(lm(K4~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K5 = sort(abs(lm(K5~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K6 = sort(abs(lm(K6~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K7 = sort(abs(lm(K7~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K8 = sort(abs(lm(K8~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K9 = sort(abs(lm(K9~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  top3.K10 = sort(abs(lm(K10~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  \n  \n  if(ncol(df.beta.exp.t)==20){\n    top3.K11 = sort(abs(lm(K11~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K12 = sort(abs(lm(K12~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K13 = sort(abs(lm(K13~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K14 = sort(abs(lm(K14~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K15 = sort(abs(lm(K15~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K16 = sort(abs(lm(K16~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K17 = sort(abs(lm(K17~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K18 = sort(abs(lm(K18~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K19 = sort(abs(lm(K19~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n    top3.K20 = sort(abs(lm(K20~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n  }\n  #Création d'une liste nommée qui contient tous les top 3\n  l.pwk  = list(top3.K1,top3.K2,top3.K3,top3.K4, top3.K5,top3.K6,top3.K7,top3.K8, top3.K9,top3.K10)\n  names(l.pwk) <- c(\"V1\",\"V2\",\"V3\",\"V4\",\"V5\",\"V6\",\"V7\",\"V8\",\"V9\",\"V10\")\n  \n  if(ncol(df.beta.exp.t)==10){\n    l.pwk  = list(top3.K1,top3.K2,top3.K3,top3.K4, top3.K5,top3.K6,top3.K7,top3.K8, top3.K9,top3.K10)\n    names(l.pwk) <- c(\"V1\",\"V2\",\"V3\",\"V4\",\"V5\",\"V6\",\"V7\",\"V8\",\"V9\",\"V10\")\n  }\n  else if(ncol(df.beta.exp.t)==20){\n    l.pwk  = list(top3.K1,top3.K2,top3.K3,top3.K4, top3.K5,top3.K6,top3.K7,top3.K8, top3.K9,top3.K10,\n                  top3.K11,top3.K12,top3.K13,top3.K14, top3.K15,top3.K16,top3.K17,top3.K18, top3.K19,top3.K20)\n    names(l.pwk) <- c(\"V1\",\"V2\",\"V3\",\"V4\",\"V5\",\"V6\",\"V7\",\"V8\",\"V9\",\"V10\",\n                      \"V11\",\"V12\",\"V13\",\"V14\",\"V15\",\"V16\",\"V17\",\"V18\",\"V19\",\"V20\")  \n  }\n  \n  \n  #Fichier gamma\n  head(df.gamma)\n  \n  df.gamma.test = df.gamma\n  \n  #Normalisation de chaque élement en fonction de la somme de la ligne\n  for (i in 1:nrow(df.gamma.test)){\n    df.gamma.test[i,] = df.gamma.test[i,] /sum(df.gamma.test[i,])\n  }\n  \n  #Calcul du score avec la fonction Score = Somme (liste.normalisée*meilleursthèmes)\n  #Pour chaque valeure max dans chaque ligne dans Gamma, on récupère les top 3 dans beta \n  \n  score.list = list()\n  \n  for (i in 1:nrow(df.gamma.test)){\n    score.words = list()\n    for(j in 1:nrow(df.beta.exp.t)){\n\n      sum.for.word = 0\n      if(use_cor==TRUE){\n        best.themes = sort(abs(df.gamma.test[i,]), decreasing = TRUE)[1]\n        all.themes = c(gsub(\"V\", \"K\", names(best.themes)), names(l.pwk[[names(best.themes)]]))\n        for(th in all.themes){\n          th.for.gamma = gsub(\"K\", \"V\", th)\n          \n          p.theme.in.document = df.gamma.test[i,][[th.for.gamma]]\n          p.word.in.document = df.beta.exp.t[j,][[th]]\n          p.for.sum = p.theme.in.document*p.word.in.document\n          sum.for.word = sum.for.word + p.for.sum\n        }\n      }\n      else{\n        all.themes = c(\"K1\",\"K2\",\"K3\",\"K4\",\"K5\",\"K6\",\"K7\",\"K8\",\"K9\",\"K10\",\n                       \"K11\",\"K12\",\"K13\",\"K14\",\"K15\",\"K16\",\"K17\",\"K18\",\"K19\",\"K20\")\n        for(th in all.themes){\n          th.for.gamma = gsub(\"K\", \"V\", th)\n          \n          p.theme.in.document = df.gamma.test[i,][[th.for.gamma]]\n          p.word.in.document = df.beta.exp.t[j,][[th]]\n          p.for.sum = p.theme.in.document*p.word.in.document\n          sum.for.word = sum.for.word + p.for.sum\n        }\n      }\n\n    \n      score.words[[j]] = sum.for.word\n      score.list[[i]] = score.words\n      \n      #name.theme = names(best.themes)\n      #score.list[[i]] = sum(l.pwk[[name.theme]]*best.themes[[name.theme]])\n    }\n  }\n  return(score.list)\n}\n\n#create_list_score(\"./final.beta\", \"./final.gamma\")\nfinal_result = create_list_score(\"./data/final.beta\", \"./data/exp20test-gamma.dat\", FALSE)\nind =  sort(unlist(final_result[[1]]), decreasing = TRUE, index.return = TRUE)\nidx = sort(ind$ix[0:68]-1)\n\n\nap_test <- read.table(\"U:/Cours/IMC-5101B/TP2/data/ap_test.txt\", quote=\"\\\"\", stringsAsFactors=FALSE)\n\nap_test_idx = as.integer(as.vector(unlist(as.list(ap_test))))\nprecision_false = length(intersect(idx, ap_test_idx))/68\n\n\n\n#create_list_score(\"./final.beta\", \"./final.gamma\")\nfinal_result = create_list_score(\"./data/final.beta\", \"./data/exp20test-gamma.dat\", TRUE)\nind =  sort(unlist(final_result[[1]]), decreasing = TRUE, index.return = TRUE)\nidx = sort(ind$ix[0:68]-1)\n\nap_test <- read.table(\"U:/Cours/IMC-5101B/TP2/data/ap_test.txt\", quote=\"\\\"\", stringsAsFactors=FALSE)\n\nap_test_idx = as.integer(as.vector(unlist(as.list(ap_test))))\nprecision_true = length(intersect(idx, ap_test_idx))/68\n\n",
    "created" : 1481872998403.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1864772983",
    "id" : "AE8A0101",
    "lastKnownWriteTime" : 1481884259,
    "path" : "U:/Cours/IMC-5101B/TP2/script.R",
    "project_path" : "script.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}