{
    "contents" : "---\ntitle: \"TP2_rendu\"\nauthor: \"Kouek - Courivaud\"\ndate: \"Friday, December 16, 2016\"\noutput: html_document\n---\nImport des fichiers beta et gamme et conversion en data frame\n\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Data preparation\n\n```{r }\nfinal.beta = read.table(\"./final.beta\")\nfinal.gamma = read.table(\"./final.gamma\")\n```\n\nTransforme les table en dataframe R pour une manipulation plus évidente et naturelle\n```{r message = FALSE}\ndf.beta = as.data.frame(final.beta)\ndf.gamma = as.data.frame(final.gamma)\n```\n\n\nConversion de beta en exponentiel de chaque élement\n```{r message = FALSE}\ndf.beta.exp = exp(df.beta )\n```\n\nTransposition de beta et renommage\n```{r message = FALSE}\ndf.beta.exp.t = as.data.frame(t(df.beta.exp))\ncolnames(df.beta.exp.t ) <- c(\"K1\",\"K2\",\"K3\",\"K4\",\"K5\",\"K6\",\"K7\",\"K8\",\"K9\",\"K10\")\n```\n\n\n## Data Formating\nApplication de la régression linéaire de chaque colonne( vu qu'on a transposé),\nen fonction des colonnes restantes.\nOn réalise une regression linéaire avec la fonction LM. Et on ne récupère que les coefficients en enlevant l'intercept.\n```{r }\ncoefficients.k1 = lm(K1~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k2 = lm(K2~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k3 = lm(K3~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k4 = lm(K4~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k5 = lm(K5~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k6 = lm(K6~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k7 = lm(K7~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k8 = lm(K8~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k9 = lm(K9~., data = df.beta.exp.t)$coefficients[2:10]\ncoefficients.k10 = lm(K10~., data = df.beta.exp.t)$coefficients[2:10]\n```\n\nCreation des top 3 pour le fichier beta pour chaque régression. On réalise la même opération que précédement. Mais on ne garde que les trois thèmes les plus corrélés.\n```{r }\ntop3.K1 = sort(abs(lm(K1~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K2 = sort(abs(lm(K2~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K3 = sort(abs(lm(K3~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K4 = sort(abs(lm(K4~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K5 = sort(abs(lm(K5~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K6 = sort(abs(lm(K6~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K7 = sort(abs(lm(K7~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K8 = sort(abs(lm(K8~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K9 = sort(abs(lm(K9~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\ntop3.K10 = sort(abs(lm(K10~., data = df.beta.exp.t)$coefficients[2:10]), decreasing = TRUE)[1:3]\n```\n\nCréation d'une liste nommée qui contient tous les top 3 calculés précédement.\n```{r }\nl.pwk  = list(top3.K1,top3.K2,top3.K3,top3.K4, top3.K5,top3.K6,top3.K7,top3.K8, top3.K9,top3.K10)\nnames(l.pwk) <- c(\"V1\",\"V2\",\"V3\",\"V4\",\"V5\",\"V6\",\"V7\",\"V8\",\"V9\",\"V10\")\n```\n\nOn peut maintenant avoir un aperçu du ficher gamma créé. \n```{r }\nhead(df.gamma)\ndf.gamma.test = df.gamma\n```\n\nNormalisation de chaque élement en fonction de la somme de la ligne\n```{r }\nfor (i in 1:nrow(df.gamma.test)){\n  df.gamma.test[i,] = df.gamma.test[i,] /sum(df.gamma.test[i,])\n}\n```\n\n\nCalcul du score avec la fonction Score = Somme (liste.normalisée*meilleursthèmes)\nPour chaque valeure max dans chaque ligne dans Gamma, on récupère les top 3 dans beta \n```{r }\nscore.list = list()\nfor (i in 1:nrow(df.gamma.test)){\n  best.themes = sort(abs(df.gamma.test[i,]), decreasing = TRUE)[1]\n  name.theme = names(best.themes)\n  score.list[[i]] = sum(l.pwk[[name.theme]]*best.themes[[name.theme]])\n}\n```\n\n```{r }\nhead(as.vector(unlist(score.list)), 10)\n```\n\nHistogramme des scores de chaque document\n```{r }\nhist(as.vector(unlist(score.list)))\n```\n\nValeur des scores des documents en fonction des index\n```{r }\nplot(as.vector(unlist(score.list)))\n```\n\n",
    "created" : 1481874081922.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "301993510",
    "id" : "E33BCF3C",
    "lastKnownWriteTime" : 1481875291,
    "path" : "U:/Cours/IMC-5101B/TP2/Tp2_rendu.Rmd",
    "project_path" : "Tp2_rendu.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}